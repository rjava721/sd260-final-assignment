{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport StatusForm from './StatusForm';\nimport Post from './Post';\nimport Comment from './Comment';\nimport './App.css'; // import moment from 'moment';// Dhruv showed me that this \n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCurrentUser = event => {\n      {\n        /* inside of header, on change , when the name is selected, grab it with event.name and change state to it */\n      }\n      let userData = this.state.userData;\n      let currentUserTempArray = this.state.currentUser;\n      let selectedUser = event.target.value; // now we update state.currentUser with setState\n\n      userData.map(user => {\n        if (selectedUser === user.userName) {\n          currentUserTempArray.name = selectedUser;\n          currentUserTempArray.id = user.id;\n          currentUserTempArray.avatarUrl = user.avatarUrl;\n          this.setState({\n            currentUser: currentUserTempArray\n          });\n          console.log(this.state.currentUser);\n        }\n      });\n    };\n\n    this.updateStoredText = event => {\n      let currentInputBoxText = event.target.value;\n      this.setState({\n        formValue: currentInputBoxText\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      // grabs the text from box, creates an object with extra details, pushes it inside allUserPosts state array\n      // then empties the input box\n      let everyUserPosts = this.state.everyUserPosts;\n      let formValue = this.state.formValue;\n      let currentUser = this.state.currentUser; // prevent the page reload\n\n      console.log('form submit function called');\n      event.preventDefault(); // take the state array and store the formtextcontnet inside of it.\n\n      {\n        if (currentUser.name === 'jawad') {\n          everyUserPosts.push({\n            \"formValue\": formValue,\n            \"id\": 1,\n            \"belongsTo\": 'jawad',\n            \"likesAmount\": 0,\n            \"createdOrder\": this.state.commentId,\n            \"commentsAmount\": 0,\n            \"userImage\": 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n          });\n          console.log(everyUserPosts);\n        } else {\n          everyUserPosts.push({\n            \"formValue\": formValue,\n            \"id\": 2,\n            \"belongsTo\": 'Skywalker',\n            \"likesAmount\": 0,\n            \"createdOrder\": this.state.commentId,\n            \"commentsAmount\": 0,\n            \"userImage\": 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n          });\n          console.log('everyUserPosts');\n          console.log(everyUserPosts);\n        }\n      } // empty the form input box\n\n      this.setState({\n        formValue: ''\n      }); // when clicking on the button, find the post order in the state array with the button's id and increment the likeAmount\n\n      this.setState({\n        commentId: this.state.commentId++\n      });\n    };\n\n    this.createPost = () => {\n      let everyUserPosts = this.state.everyUserPosts;\n      let currentUser = this.state.currentUser;\n\n      if (currentUser.name === 'everyone') {\n        return everyUserPosts.map(postObject => {\n          console.log('inside of createpost test everyone ' + postObject.belongsTo); // call a function that updates the createdorder state\n\n          return React.createElement(Post, {\n            currentUser: postObject,\n            formContent: postObject.formValue,\n            userImage: postObject.userImage,\n            likesAmount: postObject.likesAmount,\n            commentsAmount: postObject.commentsAmount,\n            incrementLikes: this.incrementLikes,\n            trackingNumber: this.state.createdOrder,\n            createComment: this.createComment,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          });\n        });\n      }\n\n      if (currentUser.name === 'jawad') {\n        return everyUserPosts.map(postObject => {\n          if (postObject.id === 1) {\n            return React.createElement(Post, {\n              currentUser: postObject,\n              formContent: postObject.formValue,\n              userImage: postObject.userImage,\n              likesAmount: postObject.likesAmount,\n              commentsAmount: postObject.commentsAmount,\n              incrementLikes: this.incrementLikes,\n              trackingNumber: this.state.createdOrder,\n              createComment: this.createComment,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137\n              },\n              __self: this\n            });\n          }\n        });\n      } else {\n        return everyUserPosts.map(postObject => {\n          if (postObject.id === 2) {\n            return React.createElement(Post, {\n              currentUser: postObject,\n              formContent: postObject.formValue,\n              userImage: postObject.userImage,\n              likesAmount: postObject.likesAmount,\n              commentsAmount: postObject.commentsAmount,\n              incrementLikes: this.incrementLikes,\n              trackingNumber: this.state.createdOrder,\n              createComment: this.createComment,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151\n              },\n              __self: this\n            });\n          }\n        });\n      }\n    };\n\n    this.createComment = () => {\n      console.log('this function is for creating a comment');\n      return React.createElement(Comment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      });\n    };\n\n    this.incrementLikes = event => {\n      // duplicate the state array, \n      // update the duplicated array\n      // set state the state array to the duplicate array\n      console.log('this function is supposed to increment likes');\n      console.log(event.target.id);\n      let tempArray = this.state.everyUserPosts;\n      tempArray.forEach((post, index) => {\n        if (index === parseInt(event.target.id)) {\n          tempArray[index].likesAmount++;\n        } else {\n          console.log('they do not match ' + index + event.target.id);\n        }\n      });\n      this.setState({\n        everyUserPosts: tempArray\n      });\n      console.log(this.state.everyUserPosts);\n    };\n\n    this.state = {\n      currentUser: {\n        name: '',\n        id: 5,\n        avatarUrl: ''\n      },\n      userData: [{\n        userName: 'everyone',\n        // placeholder for selecting every post\n        id: 5,\n        //not necessary\n        avatarUrl: '' // not necessary\n\n      }, {\n        userName: 'jawad',\n        id: 0,\n        avatarUrl: 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n      }, {\n        userName: 'Skywalker',\n        id: 1,\n        avatarUrl: 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n      }],\n      everyUserPosts: [],\n      formValue: '',\n      commentId: 0\n    };\n  } // Header================================\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Header, {\n      currentUser: this.state.currentUser,\n      userData: this.state.userData,\n      updateCurrentUser: this.updateCurrentUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(StatusForm, {\n      currentUser: this.state.currentUser,\n      handleFormSubmit: this.handleFormSubmit,\n      updateStoredText: this.updateStoredText,\n      formValue: this.state.formValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), this.createPost()); //return\n  } //render\n\n\n} //class\n\n\nlet Header = props => {\n  let alluserData = props.userData;\n  return React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \"Social News Feed\"), React.createElement(\"select\", {\n    className: \"user-select-list\",\n    onChange: props.updateCurrentUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, alluserData.map(user => {\n    return React.createElement(\"option\", {\n      value: user.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, user.userName);\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/rjh28/Desktop/school/sd260/final-assignment/final-project/src/App.js"],"names":["React","Component","StatusForm","Post","Comment","App","constructor","props","updateCurrentUser","event","userData","state","currentUserTempArray","currentUser","selectedUser","target","value","map","user","userName","name","id","avatarUrl","setState","console","log","updateStoredText","currentInputBoxText","formValue","handleFormSubmit","everyUserPosts","preventDefault","push","commentId","createPost","postObject","belongsTo","userImage","likesAmount","commentsAmount","incrementLikes","createdOrder","createComment","tempArray","forEach","post","index","parseInt","render","Header","alluserData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StatusForm from './StatusForm';\nimport Post from './Post';\nimport Comment from './Comment';\nimport './App.css';\n// import moment from 'moment';// Dhruv showed me that this \n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      currentUser: {\n        name: '',\n        id: 5,\n        avatarUrl: ''\n      },\n\n      userData: [\n        {\n          userName: 'everyone',// placeholder for selecting every post\n          id: 5,//not necessary\n          avatarUrl: ''// not necessary\n        },\n        {\n          userName: 'jawad',\n          id: 0,\n          avatarUrl: 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n        },\n        {\n          userName: 'Skywalker',\n          id: 1,\n          avatarUrl: 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n        }\n      ],\n      everyUserPosts: [],\n      formValue: '',\n      commentId: 0\n    }\n  }\n\n  // Header================================\n  updateCurrentUser = (event) => {\n    {/* inside of header, on change , when the name is selected, grab it with event.name and change state to it */}\n    let userData = this.state.userData;\n    let currentUserTempArray = this.state.currentUser;\n    let selectedUser = event.target.value;\n\n    // now we update state.currentUser with setState\n    userData.map( user => {\n      if (selectedUser === user.userName) {\n        currentUserTempArray.name = selectedUser;\n        currentUserTempArray.id = user.id;\n        currentUserTempArray.avatarUrl = user.avatarUrl;\n\n        this.setState ({ currentUser : currentUserTempArray });\n        console.log(this.state.currentUser);\n      }\n    })\n  }\n\n  // StatusForm=================================\n  updateStoredText = (event) => {\n    let currentInputBoxText = event.target.value;\n    this.setState({ formValue : currentInputBoxText});\n  }\n  \n  handleFormSubmit = (event) => {\n    // grabs the text from box, creates an object with extra details, pushes it inside allUserPosts state array\n    // then empties the input box\n\n    let everyUserPosts = this.state.everyUserPosts;\n    let formValue = this.state.formValue;\n    let currentUser = this.state.currentUser;\n\n    // prevent the page reload\n    console.log('form submit function called');\n    event.preventDefault();\n\n    // take the state array and store the formtextcontnet inside of it.\n    {if (currentUser.name === 'jawad') {\n      everyUserPosts.push({\n        \"formValue\" : formValue,\n        \"id\" : 1,\n        \"belongsTo\": 'jawad',\n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.commentId, \n        \"commentsAmount\" : 0,\n        \"userImage\": 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA' });\n      \n      console.log(everyUserPosts);\n    } else {\n      everyUserPosts.push({ \n        \"formValue\" : formValue, \n        \"id\" : 2, \n        \"belongsTo\": 'Skywalker', \n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.commentId, \n        \"commentsAmount\" : 0, \n        \"userImage\" : 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png' });\n\n      console.log('everyUserPosts');\n      console.log(everyUserPosts);\n    }}\n\n    // empty the form input box\n    this.setState({ formValue: '' });\n    \n    // when clicking on the button, find the post order in the state array with the button's id and increment the likeAmount\n    this.setState({ commentId: this.state.commentId++});\n\n  }// handleFormSubmit()\n\n  //Renders the post\n  createPost = () => {\n    let everyUserPosts = this.state.everyUserPosts;\n    let currentUser = this.state.currentUser;\n    \n    if(currentUser.name === 'everyone') {\n      return everyUserPosts.map(postObject => { \n        console.log('inside of createpost test everyone ' + postObject.belongsTo);\n        // call a function that updates the createdorder state\n        return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n        })\n    }\n\n    if(currentUser.name === 'jawad') {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 1) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n        }\n      }))\n    } else {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 2) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n        }  \n      }))\n    }\n  }\n\n  //Posts================================================\n  createComment = () => {\n    console.log('this function is for creating a comment')\n    return <Comment />;\n  }\n  incrementLikes = (event) => {\n\n    // duplicate the state array, \n    // update the duplicated array\n    // set state the state array to the duplicate array\n    console.log('this function is supposed to increment likes');\n    console.log(event.target.id);\n    \n    let tempArray = this.state.everyUserPosts;\n\n    tempArray.forEach( (post, index) => {\n      if (index === parseInt(event.target.id)) {\n        tempArray[index].likesAmount++;\n      } else {\n        console.log('they do not match ' + index + event.target.id);\n      }\n    })\n\n    this.setState({everyUserPosts: tempArray});\n    console.log(this.state.everyUserPosts)\n  }\n\n \n\n  render() {\n    return (\n      <div className='main-container'>\n        <Header \n        currentUser={this.state.currentUser} \n        userData={this.state.userData} \n        updateCurrentUser={this.updateCurrentUser}/>\n\n        <StatusForm \n        currentUser={this.state.currentUser} \n        handleFormSubmit={this.handleFormSubmit} \n        updateStoredText={this.updateStoredText} \n        formValue={this.state.formValue} />\n\n        {/* 5 static posts */}\n        {/* <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 1\" \n          userImage=\"https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA\"\n          likesAmount='5'\n          commentsAmount= '0'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n        <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 2\" \n          userImage=\"https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA\"\n          likesAmount='5'\n          commentsAmount= '4'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n        <Post \n          currentUser=\"Skywalker\" \n          formContent=\"static post 3\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='5'\n          commentsAmount= '3'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n        <Post \n          currentUser=\"Skywalker\" \n          formContent=\"static post 4\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='6'\n          commentsAmount= '2'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n        <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 5\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='9'\n          commentsAmount= '3'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} /> */}\n\n        {this.createPost()}\n      </div>  \n    )//return\n  }//render\n}//class\n\nlet Header = (props) => {\n  let alluserData = props.userData;\n  return (\n    <div className='header'>\n      <h2>Social News Feed</h2>\n      <select \n      className='user-select-list' \n      onChange={props.updateCurrentUser}\n      >\n      {alluserData\n      .map(user => { \n        return <option \n        value={user.userName}>{user.userName}</option> \n      })}\n      </select>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}