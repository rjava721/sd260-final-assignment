{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\rjh28\\\\Desktop\\\\school\\\\sd260\\\\final-assignment\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';//import Header from './Header';\nimport StatusForm from'./StatusForm';//import Timeline from './Timeline';\nimport Post from'./Post';import Comment from'./Comment';import'./App.css';// update your data\n// you are rendering your stuff through setState which updates your data\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.updateCurrentUser=function(event){{/* inside of header, on change , when the name is selected, grab it with event.name and change state to it */}var userData=_this.state.userData;var currentUserTempArray=_this.state.currentUser;var selectedUser=event.target.value;// now we update state.currentUser with setState\nuserData.map(function(user){if(selectedUser===user.userName){currentUserTempArray.name=selectedUser;currentUserTempArray.id=user.id;currentUserTempArray.avatarUrl=user.avatarUrl;_this.setState({currentUser:currentUserTempArray});console.log(_this.state.currentUser);}});};_this.handleFormSubmit=function(event){// if the currentuser is 1 then push everything related to it in its own array\n// else currentuser is 2 then push all posts to user2statearray\n// then empty the box\nvar everyUserPosts=_this.state.everyUserPosts;var formValue=_this.state.formValue;var currentUser=_this.state.currentUser;// prevent the page reload\nconsole.log('form submit function called');event.preventDefault();// take the state array and store the formtextcontnet inside of it.\n{if(currentUser.name==='jawad'){everyUserPosts.push({\"formValue\":formValue,\"id\":1,\"belongsTo\":'jawad',\"likesAmount\":0,\"createdOrder\":_this.state.createdOrder,\"commentsAmount\":0,\"userImage\":'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'});console.log(everyUserPosts);}else{everyUserPosts.push({\"formValue\":formValue,\"id\":2,\"belongsTo\":'Skywalker',\"likesAmount\":0,\"createdOrder\":_this.state.createdOrder,\"commentsAmount\":0,\"userImage\":'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'});console.log('everyUserPosts');console.log(everyUserPosts);}}// empty the form input box\n_this.setState({formValue:''});// when clicking on the button, find the post order in the state array with the button's id and increment the likeAmount\n_this.setState({createdOrder:_this.state.createdOrder++});};_this.createPost=function(){var everyUserPosts=_this.state.everyUserPosts;var currentUser=_this.state.currentUser;if(currentUser.name==='everyone'){return everyUserPosts.map(function(postObject){console.log('inside of createpost test everyone '+postObject.belongsTo);// call a function that updates the createdorder state\nreturn React.createElement(Post,{currentUser:postObject,formContent:postObject.formValue,userImage:postObject.userImage,likesAmount:postObject.likesAmount,commentsAmount:postObject.commentsAmount,incrementLikes:_this.incrementLikes,trackingNumber:_this.state.createdOrder,createComment:_this.createComment});});}if(currentUser.name==='jawad'){return everyUserPosts.map(function(postObject){if(postObject.id===1){return React.createElement(Post,{currentUser:postObject,formContent:postObject.formValue,userImage:postObject.userImage,likesAmount:postObject.likesAmount,commentsAmount:postObject.commentsAmount,incrementLikes:_this.incrementLikes,trackingNumber:_this.state.createdOrder,createComment:_this.createComment});}});}else{return everyUserPosts.map(function(postObject){if(postObject.id===2){return React.createElement(Post,{currentUser:postObject,formContent:postObject.formValue,userImage:postObject.userImage,likesAmount:postObject.likesAmount,commentsAmount:postObject.commentsAmount,incrementLikes:_this.incrementLikes,trackingNumber:_this.state.createdOrder,createComment:_this.createComment});}});}};_this.createComment=function(){return React.createElement(Comment,null);};_this.incrementLikes=function(event){// you duplicate the state array, \n// update the duplicated array\n// set state the state array to the duplicate array\nconsole.log('this function is supposed to increment likes');console.log(event.target.id);var tempArray=_this.state.everyUserPosts;tempArray.forEach(function(post,index){if(index===parseInt(event.target.id)){tempArray[index].likesAmount++;}else{console.log('they do not match '+index+event.target.id);}});_this.setState({everyUserPosts:tempArray});console.log(_this.state.everyUserPosts);};_this.updateStoredText=function(event){var currentInputBoxText=event.target.value;_this.setState({formValue:currentInputBoxText});};_this.state={currentUser:{name:'',id:5,avatarUrl:''},userData:[{userName:'everyone',id:5,avatarUrl:''},{userName:'jawad',id:0,avatarUrl:'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'},{userName:'Skywalker',id:1,avatarUrl:'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'}],everyUserPosts:[],formValue:'',createdOrder:0};return _this;}// Header================================\n_createClass(App,[{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"main-container\"},React.createElement(Header,{currentUser:this.state.currentUser,userData:this.state.userData,onChange:this.updateCurrentUser}),React.createElement(StatusForm,{currentUser:this.state.currentUser,handleFormSubmit:this.handleFormSubmit,updateStoredText:this.updateStoredText,formValue:this.state.formValue}),this.createPost(),this.createComment());}//render\n}]);return App;}(Component);//class\nvar Header=function Header(props){var alluserData=props.userData;return React.createElement(\"div\",{className:\"header\"},React.createElement(\"h2\",null,\"Social News Feed\"),React.createElement(\"select\",{className:\"user-select-list\",onChange:props.onChange},alluserData.map(function(user){return React.createElement(\"option\",{value:user.userName},user.userName);})));};export default App;","map":{"version":3,"sources":["C:/Users/rjh28/Desktop/school/sd260/final-assignment/final-project/src/App.js"],"names":["React","Component","StatusForm","Post","Comment","App","props","updateCurrentUser","event","userData","state","currentUserTempArray","currentUser","selectedUser","target","value","map","user","userName","name","id","avatarUrl","setState","console","log","handleFormSubmit","everyUserPosts","formValue","preventDefault","push","createdOrder","createPost","postObject","belongsTo","userImage","likesAmount","commentsAmount","incrementLikes","createComment","tempArray","forEach","post","index","parseInt","updateStoredText","currentInputBoxText","Header","alluserData","onChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import Header from './Header';\nimport StatusForm from './StatusForm';\n//import Timeline from './Timeline';\nimport Post from './Post';\n\nimport Comment from './Comment';\nimport './App.css';\n\n// update your data\n// you are rendering your stuff through setState which updates your data\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      currentUser: {\n        name: '',\n        id: 5,\n        avatarUrl: ''\n      },\n\n      userData: [\n        {\n          userName: 'everyone',\n          id: 5,\n          avatarUrl: ''\n        },\n        {\n          userName: 'jawad',\n          id: 0,\n          avatarUrl: 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n        },\n        {\n          userName: 'Skywalker',\n          id: 1,\n          avatarUrl: 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n        }\n      ],\n\n      everyUserPosts: [],\n\n      formValue: '',\n\n      createdOrder: 0\n    }\n  }\n\n  // Header================================\n\n  updateCurrentUser = (event) => {\n    {/* inside of header, on change , when the name is selected, grab it with event.name and change state to it */}\n    let userData = this.state.userData;\n    let currentUserTempArray = this.state.currentUser;\n    let selectedUser = event.target.value;\n\n    // now we update state.currentUser with setState\n    userData.map( user => {\n      if (selectedUser === user.userName) {\n        currentUserTempArray.name = selectedUser;\n        currentUserTempArray.id = user.id;\n        currentUserTempArray.avatarUrl = user.avatarUrl;\n\n        this.setState ({ currentUser : currentUserTempArray });\n        console.log(this.state.currentUser);\n      }\n    })\n  }\n\n  // StatusForm=================================\n\n  handleFormSubmit = (event) => {\n    // if the currentuser is 1 then push everything related to it in its own array\n    // else currentuser is 2 then push all posts to user2statearray\n    // then empty the box\n    let everyUserPosts = this.state.everyUserPosts;\n   \n    let formValue = this.state.formValue;\n    let currentUser = this.state.currentUser;\n\n    // prevent the page reload\n    console.log('form submit function called');\n    event.preventDefault();\n\n    // take the state array and store the formtextcontnet inside of it.\n    {if (currentUser.name === 'jawad') {\n      everyUserPosts.push({\n        \"formValue\" : formValue,\n        \"id\" : 1,\n        \"belongsTo\": 'jawad',\n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.createdOrder, \n        \"commentsAmount\" : 0,\n        \"userImage\": 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA' });\n      \n      console.log(everyUserPosts);\n    } else {\n      everyUserPosts.push({ \n        \"formValue\" : formValue, \n        \"id\" : 2, \n        \"belongsTo\": 'Skywalker', \n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.createdOrder, \n        \"commentsAmount\" : 0, \n        \"userImage\" : 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png' });\n\n      console.log('everyUserPosts');\n      console.log(everyUserPosts);\n    }}\n\n    // empty the form input box\n    this.setState({ formValue : '' });\n    \n    // when clicking on the button, find the post order in the state array with the button's id and increment the likeAmount\n    this.setState({ createdOrder: this.state.createdOrder++});\n\n  }// handleFormSubmit()\n\n  //call it renderPost\n  createPost = () => {\n    let everyUserPosts = this.state.everyUserPosts;\n    let currentUser = this.state.currentUser;\n    \n\n    if(currentUser.name === 'everyone') {\n      \n      return everyUserPosts.map(postObject => { \n        console.log('inside of createpost test everyone ' + postObject.belongsTo);\n        // call a function that updates the createdorder state\n        return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n          \n        })\n    }\n\n    if(currentUser.name === 'jawad') {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 1) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n\n        }\n      }))\n    } else {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 2) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n        }  \n      }))\n    }\n  }\n\n  //Posts================================================\n  createComment = () => {\n    return <Comment />;\n  }\n  incrementLikes = (event) => {\n\n    // you duplicate the state array, \n    // update the duplicated array\n    // set state the state array to the duplicate array\n    console.log('this function is supposed to increment likes');\n    console.log(event.target.id);\n    \n    let tempArray = this.state.everyUserPosts;\n\n    tempArray.forEach( (post, index) => {\n      if (index === parseInt(event.target.id)) {\n        tempArray[index].likesAmount++;\n      } else {\n        console.log('they do not match ' + index + event.target.id);\n      }\n    })\n\n    this.setState({everyUserPosts: tempArray});\n    console.log(this.state.everyUserPosts)\n  }\n\n  updateStoredText = (event) => {\n    let currentInputBoxText = event.target.value;\n    this.setState({ formValue : currentInputBoxText});\n  }\n\n  render() {\n    return (\n      <div className='main-container'>\n        <Header \n        currentUser={this.state.currentUser} \n        userData={this.state.userData} \n        onChange={this.updateCurrentUser}/>\n\n        <StatusForm \n        currentUser={this.state.currentUser} \n        handleFormSubmit={this.handleFormSubmit} \n        updateStoredText={this.updateStoredText} \n        formValue={this.state.formValue} />\n\n        {/* 5 static posts */}\n        {this.createPost()}\n        {this.createComment()}\n      </div>  \n    )\n  }//render\n\n}//class\n\nlet Header = (props) => {\n  let alluserData = props.userData;\n  return (\n    <div className='header'>\n      <h2>Social News Feed</h2>\n      <select \n      className='user-select-list' \n      onChange={props.onChange}\n      >\n      {\n      alluserData.map(user => { \n        return <option value={user.userName}>{user.userName}</option> \n      })\n      }\n      </select>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}