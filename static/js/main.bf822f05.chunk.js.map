{"version":3,"sources":["StatusForm.js","Comment.js","Timeline.js","Post.js","App.js","index.js"],"names":["StatusForm","props","className","this","currentUser","name","onSubmit","handleFormSubmit","value","formValue","onChange","updateStoredText","placeholder","type","Component","Comment","Post","src","userImage","alt","belongsTo","formContent","likesAmount","commentsAmount","onClick","incrementLikes","id","trackingNumber","createComment","App","updateCurrentUser","event","userData","state","currentUserTempArray","selectedUser","target","map","user","userName","avatarUrl","setState","console","log","everyUserPosts","preventDefault","push","createdOrder","createPost","postObject","tempArray","forEach","post","index","parseInt","currentInputBoxText","Header","alluserData","ReactDOM","render","document","getElementById"],"mappings":"wNAsCeA,E,YAlCb,WAAYC,GAAQ,qEACZA,I,sEAWN,OACE,yBAAKC,UAAU,cACb,6CACA,8BAAM,4BAAKC,KAAKF,MAAMG,YAAYC,OAElC,0BAAMH,UAAU,aAAaI,SAAUH,KAAKF,MAAMM,kBAChD,8BACAC,MAAOL,KAAKF,MAAMQ,UAClBC,SAAUP,KAAKF,MAAMU,iBACrBC,YAAY,kBACZV,UAAU,oBAEV,2BACAW,KAAK,SACLL,MAAM,OACNN,UAAU,wB,GA5BKY,aCcVC,GCbQD,Y,YDDrB,WAAYb,GAAQ,qEACZA,I,sEAIN,OACE,yBAAKC,UAAU,qBACb,8CACA,2BAAG,mCAAW,0C,GATAY,cE2CPE,E,YAvCb,WAAYf,GAAQ,qEACZA,I,sEAIN,OACE,6BACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,sBACb,yBAAKe,IAAKd,KAAKF,MAAMiB,UAAWC,IAAI,SAEpC,yBAAKjB,UAAU,kBACb,4BAAKC,KAAKF,MAAMG,YAAYgB,WAC5B,qCAGF,yBAAKlB,UAAU,gBACb,2BAAIC,KAAKF,MAAMoB,eAInB,yBAAKnB,UAAU,wBACb,2BAAIC,KAAKF,MAAMqB,YAAf,UAAmCnB,KAAKF,MAAMsB,eAA9C,aAQA,4BAAQV,KAAK,SAASW,QAASrB,KAAKF,MAAMwB,eAAgBC,GAAIvB,KAAKF,MAAM0B,gBAAzE,QACA,4BAAQd,KAAK,SAASW,QAASrB,KAAKF,MAAM2B,eAA1C,kB,GAhCOd,aCObe,G,kBACJ,WAAa5B,GAAQ,IAAD,8BAClB,4CAAMA,KAoCR6B,kBAAoB,SAACC,GAEnB,IAAIC,EAAW,EAAKC,MAAMD,SACtBE,EAAuB,EAAKD,MAAM7B,YAClC+B,EAAeJ,EAAMK,OAAO5B,MAGhCwB,EAASK,KAAK,SAAAC,GACRH,IAAiBG,EAAKC,WACxBL,EAAqB7B,KAAO8B,EAC5BD,EAAqBR,GAAKY,EAAKZ,GAC/BQ,EAAqBM,UAAYF,EAAKE,UAEtC,EAAKC,SAAU,CAAErC,YAAc8B,IAC/BQ,QAAQC,IAAI,EAAKV,MAAM7B,kBAnDT,EA0DpBG,iBAAmB,SAACwB,GAIlB,IAAIa,EAAiB,EAAKX,MAAMW,eAE5BnC,EAAY,EAAKwB,MAAMxB,UACvBL,EAAc,EAAK6B,MAAM7B,YAG7BsC,QAAQC,IAAI,+BACZZ,EAAMc,iBAGoB,UAArBzC,EAAYC,MACfuC,EAAeE,KAAK,CAClB,UAAcrC,EACd,GAAO,EACP,UAAa,QACb,YAAgB,EAChB,aAAiB,EAAKwB,MAAMc,aAC5B,eAAmB,EACnB,UAAa,uIAEfL,QAAQC,IAAIC,KAEZA,EAAeE,KAAK,CAClB,UAAcrC,EACd,GAAO,EACP,UAAa,YACb,YAAgB,EAChB,aAAiB,EAAKwB,MAAMc,aAC5B,eAAmB,EACnB,UAAc,2IAEhBL,QAAQC,IAAI,kBACZD,QAAQC,IAAIC,IAId,EAAKH,SAAS,CAAEhC,UAAY,KAG5B,EAAKgC,SAAS,CAAEM,aAAc,EAAKd,MAAMc,kBArGvB,EA0GpBC,WAAa,WACX,IAAIJ,EAAiB,EAAKX,MAAMW,eAC5BxC,EAAc,EAAK6B,MAAM7B,YAG7B,MAAwB,aAArBA,EAAYC,KAENuC,EAAeP,KAAI,SAAAY,GAGxB,OAFAP,QAAQC,IAAI,sCAAwCM,EAAW7B,WAExD,kBAAC,EAAD,CACLhB,YAAa6C,EACb5B,YAAa4B,EAAWxC,UACxBS,UAAW+B,EAAW/B,UACtBI,YAAa2B,EAAW3B,YACxBC,eAAgB0B,EAAW1B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKM,MAAMc,aAC3BnB,cAAe,EAAKA,mBAKF,UAArBxB,EAAYC,KACLuC,EAAeP,KAAI,SAAAY,GACzB,GAAqB,IAAlBA,EAAWvB,GACZ,OAAO,kBAAC,EAAD,CACPtB,YAAa6C,EACb5B,YAAa4B,EAAWxC,UACxBS,UAAW+B,EAAW/B,UACtBI,YAAa2B,EAAW3B,YACxBC,eAAgB0B,EAAW1B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKM,MAAMc,aAC3BnB,cAAe,EAAKA,mBAKhBgB,EAAeP,KAAI,SAAAY,GACzB,GAAqB,IAAlBA,EAAWvB,GACZ,OAAO,kBAAC,EAAD,CACPtB,YAAa6C,EACb5B,YAAa4B,EAAWxC,UACxBS,UAAW+B,EAAW/B,UACtBI,YAAa2B,EAAW3B,YACxBC,eAAgB0B,EAAW1B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKM,MAAMc,aAC3BnB,cAAe,EAAKA,oBA3JR,EAkKpBA,cAAgB,WACd,OAAO,kBAAC,EAAD,OAnKW,EAqKpBH,eAAiB,SAACM,GAKhBW,QAAQC,IAAI,gDACZD,QAAQC,IAAIZ,EAAMK,OAAOV,IAEzB,IAAIwB,EAAY,EAAKjB,MAAMW,eAE3BM,EAAUC,SAAS,SAACC,EAAMC,GACpBA,IAAUC,SAASvB,EAAMK,OAAOV,IAClCwB,EAAUG,GAAO/B,cAEjBoB,QAAQC,IAAI,qBAAuBU,EAAQtB,EAAMK,OAAOV,OAI5D,EAAKe,SAAS,CAACG,eAAgBM,IAC/BR,QAAQC,IAAI,EAAKV,MAAMW,iBAxLL,EA2LpBjC,iBAAmB,SAACoB,GAClB,IAAIwB,EAAsBxB,EAAMK,OAAO5B,MACvC,EAAKiC,SAAS,CAAEhC,UAAY8C,KA3L5B,EAAKtB,MAAQ,CACX7B,YAAa,CACXC,KAAM,GACNqB,GAAI,EACJc,UAAW,IAGbR,SAAU,CACR,CACEO,SAAU,WACVb,GAAI,EACJc,UAAW,IAEb,CACED,SAAU,QACVb,GAAI,EACJc,UAAW,sIAEb,CACED,SAAU,YACVb,GAAI,EACJc,UAAW,2IAIfI,eAAgB,GAEhBnC,UAAW,GAEXsC,aAAc,GA/BE,E,sEAiMlB,OACE,yBAAK7C,UAAU,kBACb,kBAAC,EAAD,CACAE,YAAaD,KAAK8B,MAAM7B,YACxB4B,SAAU7B,KAAK8B,MAAMD,SACrBtB,SAAUP,KAAK2B,oBAEf,kBAAC,EAAD,CACA1B,YAAaD,KAAK8B,MAAM7B,YACxBG,iBAAkBJ,KAAKI,iBACvBI,iBAAkBR,KAAKQ,iBACvBF,UAAWN,KAAK8B,MAAMxB,YAGrBN,KAAK6C,aACL7C,KAAKyB,qB,GAjNId,cAwNd0C,EAAS,SAACvD,GACZ,IAAIwD,EAAcxD,EAAM+B,SACxB,OACE,yBAAK9B,UAAU,UACb,gDACA,4BACAA,UAAU,mBACVQ,SAAUT,EAAMS,UAGhB+C,EAAYpB,KAAI,SAAAC,GACd,OAAO,4BAAQ9B,MAAO8B,EAAKC,UAAWD,EAAKC,gBAQpCV,ICnPf6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.bf822f05.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport App from './App';\r\n\r\nclass StatusForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    // we have 2 functions\r\n    // the first one blocks the submit \r\n    // the second one updates the value of the state with the\r\n    // value of the textBox\r\n    // then stores it in array\r\n    // then maps through and then display posts\r\n    // which then clear the box \r\n    return (\r\n      <div className='status-box'>\r\n        <h4>Create a post</h4>\r\n        <span><h4>{this.props.currentUser.name}</h4></span>\r\n\r\n        <form className='input-form' onSubmit={this.props.handleFormSubmit}> \r\n          <textarea \r\n          value={this.props.formValue}  \r\n          onChange={this.props.updateStoredText} \r\n          placeholder='Write a post...' \r\n          className='status-post-box'/>\r\n          \r\n          <input \r\n          type='submit' \r\n          value='Post' \r\n          className='submit-button'></input>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StatusForm;","import React, { Component } from 'react';\r\n\r\nclass Comment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='comment-container'> \r\n        <p>Comment content</p>\r\n        <p><a>Like</a><a>Reply</a></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Comment","import React, { Component } from 'react';\r\nimport Post from './Post';\r\nimport App from './App';\r\n\r\nclass Timeline extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    // we can have an array of posts associated with each user\r\n    // iterate through that array and for each post, return a post element\r\n    return (\r\n      <div className='all-posts-container'>\r\n        <h3>Posts</h3>\r\n        <Post />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timeline;  ","import React, { Component } from 'react';\r\nimport Timeline from './Timeline';\r\nimport App from './App';\r\nimport Comment from './Comment';\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='post-container'>\r\n          <div className='post-top-container'>\r\n            <img src={this.props.userImage} alt=\"prfl\"/>\r\n\r\n            <div className='post-user-info'>\r\n              <h4>{this.props.currentUser.belongsTo}</h4>\r\n              <h4>Time</h4>\r\n            </div>\r\n\r\n            <div className='post-top-msg'>\r\n              <p>{this.props.formContent}</p>\r\n            </div>\r\n          </div>\r\n              \r\n          <div className='post-interaction-box'>\r\n            <p>{this.props.likesAmount} Likes {this.props.commentsAmount} Comments</p>\r\n            {/* // when clicking on button\r\n                // increment the amount of likes\r\n                // we can have each post have an id\r\n                // and each like button inside these posts have the same id\r\n                //iterate through state array,\r\n                //if index===button id\r\n                //incrementcounter */}\r\n            <button type='button' onClick={this.props.incrementLikes} id={this.props.trackingNumber}>Like</button>\r\n            <button type='button' onClick={this.props.createComment}>Comment</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;","import React, { Component } from 'react';\n//import Header from './Header';\nimport StatusForm from './StatusForm';\n//import Timeline from './Timeline';\nimport Post from './Post';\n\nimport Comment from './Comment';\nimport './App.css';\n\n// update your data\n// you are rendering your stuff through setState which updates your data\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      currentUser: {\n        name: '',\n        id: 5,\n        avatarUrl: ''\n      },\n\n      userData: [\n        {\n          userName: 'everyone',\n          id: 5,\n          avatarUrl: ''\n        },\n        {\n          userName: 'jawad',\n          id: 0,\n          avatarUrl: 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n        },\n        {\n          userName: 'Skywalker',\n          id: 1,\n          avatarUrl: 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n        }\n      ],\n\n      everyUserPosts: [],\n\n      formValue: '',\n\n      createdOrder: 0\n    }\n  }\n\n  // Header================================\n\n  updateCurrentUser = (event) => {\n    {/* inside of header, on change , when the name is selected, grab it with event.name and change state to it */}\n    let userData = this.state.userData;\n    let currentUserTempArray = this.state.currentUser;\n    let selectedUser = event.target.value;\n\n    // now we update state.currentUser with setState\n    userData.map( user => {\n      if (selectedUser === user.userName) {\n        currentUserTempArray.name = selectedUser;\n        currentUserTempArray.id = user.id;\n        currentUserTempArray.avatarUrl = user.avatarUrl;\n\n        this.setState ({ currentUser : currentUserTempArray });\n        console.log(this.state.currentUser);\n      }\n    })\n  }\n\n  // StatusForm=================================\n\n  handleFormSubmit = (event) => {\n    // if the currentuser is 1 then push everything related to it in its own array\n    // else currentuser is 2 then push all posts to user2statearray\n    // then empty the box\n    let everyUserPosts = this.state.everyUserPosts;\n   \n    let formValue = this.state.formValue;\n    let currentUser = this.state.currentUser;\n\n    // prevent the page reload\n    console.log('form submit function called');\n    event.preventDefault();\n\n    // take the state array and store the formtextcontnet inside of it.\n    {if (currentUser.name === 'jawad') {\n      everyUserPosts.push({\n        \"formValue\" : formValue,\n        \"id\" : 1,\n        \"belongsTo\": 'jawad',\n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.createdOrder, \n        \"commentsAmount\" : 0,\n        \"userImage\": 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA' });\n      \n      console.log(everyUserPosts);\n    } else {\n      everyUserPosts.push({ \n        \"formValue\" : formValue, \n        \"id\" : 2, \n        \"belongsTo\": 'Skywalker', \n        \"likesAmount\" : 0,\n        \"createdOrder\" : this.state.createdOrder, \n        \"commentsAmount\" : 0, \n        \"userImage\" : 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png' });\n\n      console.log('everyUserPosts');\n      console.log(everyUserPosts);\n    }}\n\n    // empty the form input box\n    this.setState({ formValue : '' });\n    \n    // when clicking on the button, find the post order in the state array with the button's id and increment the likeAmount\n    this.setState({ createdOrder: this.state.createdOrder++});\n\n  }// handleFormSubmit()\n\n  //call it renderPost\n  createPost = () => {\n    let everyUserPosts = this.state.everyUserPosts;\n    let currentUser = this.state.currentUser;\n    \n\n    if(currentUser.name === 'everyone') {\n      \n      return everyUserPosts.map(postObject => { \n        console.log('inside of createpost test everyone ' + postObject.belongsTo);\n        // call a function that updates the createdorder state\n        return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.createdOrder} \n          createComment={this.createComment} />\n          \n        })\n    }\n\n    if(currentUser.name === 'jawad') {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 1) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n\n        }\n      }))\n    } else {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 2) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.createdOrder}\n          createComment={this.createComment} />\n        }  \n      }))\n    }\n  }\n\n  //Posts================================================\n  createComment = () => {\n    return <Comment />;\n  }\n  incrementLikes = (event) => {\n\n    // you duplicate the state array, \n    // update the duplicated array\n    // set state the state array to the duplicate array\n    console.log('this function is supposed to increment likes');\n    console.log(event.target.id);\n    \n    let tempArray = this.state.everyUserPosts;\n\n    tempArray.forEach( (post, index) => {\n      if (index === parseInt(event.target.id)) {\n        tempArray[index].likesAmount++;\n      } else {\n        console.log('they do not match ' + index + event.target.id);\n      }\n    })\n\n    this.setState({everyUserPosts: tempArray});\n    console.log(this.state.everyUserPosts)\n  }\n\n  updateStoredText = (event) => {\n    let currentInputBoxText = event.target.value;\n    this.setState({ formValue : currentInputBoxText});\n  }\n\n  render() {\n    return (\n      <div className='main-container'>\n        <Header \n        currentUser={this.state.currentUser} \n        userData={this.state.userData} \n        onChange={this.updateCurrentUser}/>\n\n        <StatusForm \n        currentUser={this.state.currentUser} \n        handleFormSubmit={this.handleFormSubmit} \n        updateStoredText={this.updateStoredText} \n        formValue={this.state.formValue} />\n\n        {/* 5 static posts */}\n        {this.createPost()}\n        {this.createComment()}\n      </div>  \n    )\n  }//render\n\n}//class\n\nlet Header = (props) => {\n  let alluserData = props.userData;\n  return (\n    <div className='header'>\n      <h2>Social News Feed</h2>\n      <select \n      className='user-select-list' \n      onChange={props.onChange}\n      >\n      {\n      alluserData.map(user => { \n        return <option value={user.userName}>{user.userName}</option> \n      })\n      }\n      </select>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}